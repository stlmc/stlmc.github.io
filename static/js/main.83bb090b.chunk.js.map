{"version":3,"sources":["Component/LinePlot/style/variable.module.scss","Component/LinePlot/style/LinePlotStyle.scss","Component/Element.tsx","Component/Core/Util/Layout.tsx","Component/Core/Renderer/ModeRenderer.js","Component/Core/Renderer/MainRenderer.js","Component/Core/Renderer/PropositionRenderer.js","Component/Core/Util/DataParser.tsx","Component/LinePlot/LinePlot.tsx","Component/Example.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","IntroPage","props","str2Math","bind","str","dangerouslySetInnerHTML","__html","katex","renderToString","throwOnError","className","language","style","atelierForestLight","href","target","React","Component","margin","top","right","bottom","left","size","width","height","PropData","range","interval_range","ModeRenderer","_size","_margin_viewer","_index","_jd","this","axis_delta","x_clip_margin","data_viewer_height","_tag","d3","selectAll","remove","maxX","data","xrange","yrange","type","min","max","dataXrange","length","sim","elem","includes","push","canvas","append","attr","modeCanvas","XscaleError","YscaleError","Xscale","domain","Yscale","scaleX","scaleY","modeCanvasIntervalLines","call","tickValues","tickSize","tickPadding","tickFormat","select","modeCanvasXaxis","modeCanvasYaxis","ticks","d","map","e","parseInt","i","parseFloat","modeGraph","enter","modeLineGenerator","x","y","curve","modeLineG","Renderer","maxY","l","xdata","pdata","vardict","modeSize","subXscale","subYscale","refData","t1","fps","t0","Date","now","text","Math","round","graphCanvas","graphCanvasFront","colorScale","dataYrange","dataCanvasXscale","dataCanvasYscale","dataCanvasXscaleZoom","dataCanvasYscaleZoom","graphCanvasXaxisGrid","graphCanvasYaxisGrid","graphCanvasXaxis","graphCanvasYaxis","zoom","extent","scaleExtent","Infinity","translateExtent","on","transform","rescaleX","rescaleY","propCanvasYscale","lineGenerator","lineGenerator2","lineG","lineGraph","each","newX","tooltip","drawGraph","color","newDataList","nameList","k","name","infoHeight","InfoCanvas","bisectDate","popup","mouse","$","pos","invert","bisectPos","d0","d1","final_data","_graph","graph","PropositionRenderer","propCanvas","propCanvasIntervalLines","propCanvasXaxis","propCanvasYaxis","propGraph","propLineGenerator","propLineG","Json","_jsonString","_intervalsMap","Map","_intervalVarMap","_dataByNameMap","_xRangeMap","_yRangeMap","_graph_size","minX","totalMaxX","totalMinX","_isEmpty","_var_list","_x_data_list","_interval_flat_list","_interval_info","_propMap","_modeMap","parse","clearAll","Object","values","variable","interval","dataByName","prop","mode","intervalInfo","full_interval_range","entries","ovalue","interval_index","interval_data","tmp","intIndex","set","counter_mode","mode_name","mode_type","mode_data","intv_data_set","ii2","numnumlist","iifg","get","yy","tmp_mode","actual","originalData","counter","prop_name","prop_actual","prop_data","tmp_prop","s","index","varList","v","points","intIndexInt","intervals","tmp_interval","IsInList","pv","getFromGraph","minY","tmp_data","res","intv","intvElem","newI","clear","jsonString","LinePlot","styleVariable","replace","margin_viewer_top","margin_viewer_right","margin_viewer_bottom","margin_viewer_left","renderers","propRenderers","modeRenderers","njson","require","base_margin","state","isCounterExm","graphNum","model","propState","isEnabled","numOfGraph","propMap","propData","modeState","modeMap","toggle","isToggleChanged","xlist","serverError","message","error","Item","ItemList","Main","gs","GetGraphSize","isRedBool","window","newSize","red","GetGraph","isBoolean","propSize","modeIsBoolean","GetModeSize","md","setState","TotalMinX","TotalMaxX","GetIntervalInfoFlat","prevProps","prevState","snapshot","isEmpty","modeRenderersXScale","modeRenderersYScale","GetMode","loadGraph","getXscale","getYscale","eGraph","GetDataByName","xRange","yRange","variables","GetProp","vars","GetVar","label","marginLeft","marginRight","key","Form","Row","Check","onChange","checked","onClick","newIsEnabled","id","display","mod","isBool","newIs","res2","res3","PropUI","ModeUI","role","ExamplePage","showLineNumbers","App","basename","Navbar","fixed","bg","Brand","to","Nav","Text","ButtonToolbar","OverlayTrigger","placement","overlay","Tooltip","Button","variant","aria-hidden","focusable","data-prefix","data-icon","xmlns","viewBox","fill","Link","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83bb090b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"width\":\"820px\",\"height\":\"600px\",\"width_viewer\":\"420px\",\"height_viewer\":\"300px\",\"width_controller\":\"420px\",\"height_controller\":\"100px\",\"margin_viewer_top\":\"20px\",\"margin_viewer_right\":\"30px\",\"margin_viewer_bottom\":\"50px\",\"margin_viewer_left\":\"30px\",\"margin_controller_top\":\"20px\",\"margin_controller_right\":\"20px\",\"margin_controller_bottom\":\"10px\",\"margin_controller_left\":\"20px\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"width\":\"820px\",\"height\":\"600px\",\"width_viewer\":\"420px\",\"height_viewer\":\"300px\",\"width_controller\":\"420px\",\"height_controller\":\"100px\",\"margin_viewer_top\":\"20px\",\"margin_viewer_right\":\"30px\",\"margin_viewer_bottom\":\"50px\",\"margin_viewer_left\":\"30px\",\"margin_controller_top\":\"20px\",\"margin_controller_right\":\"20px\",\"margin_controller_bottom\":\"10px\",\"margin_controller_left\":\"20px\"};","import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'katex/dist/katex.min.css';\nimport katex from 'katex';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport {atelierForestLight} from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\n\n/*\n * Props and State\n */\ninterface Props {\n}\n\ninterface State {\n}\n\n\nclass IntroPage extends React.Component<Props, State> {\n    //private liteAdaptor:LiteAdaptor = new LiteAdaptor();\n    constructor(props: Props) {\n        super(props);\n        this.str2Math = this.str2Math.bind(this);\n    }\n\n    str2Math(str: string) {\n        return (\n            <span dangerouslySetInnerHTML={{\n                __html: katex.renderToString(str, {\n                    throwOnError: false\n                })\n            }}/>\n        )\n    }\n\n    render() {\n\n\n        return (\n            <div>\n                <div className=\"introduction-main\">\n                    <div className=\"article\">\n                        <div className=\"title\">stlMC</div><hr/>\n                        <div className=\"body\">\n                            <b>stlMC</b> is a bounded model checking tool for signal temporal logic(STL) of hybrid\n                            system. The algorithm of the tool is refutationally complete for STL properties of\n                            bounded signal. It encodes STL bounded model checking problems as the reductions into\n                            the satisfiability of a first-order logic formula over the real numbers.\n                            The satisfiability of the resulting formula can be determined using Z3 or Yices\n                            SMT solvers. <b>stlMC</b> supports language to describe hybrid automata and STL\n                            formulas. It searched a concrete counterexample that falsify the given STL formula\n                            and if a counterexample is exist, it draws a graph of the path of the counterexample.\n                        </div>\n                    </div>\n                    <div className=\"article\">\n                        <div className=\"title\">Installation</div>\n                        <hr/>\n                        <div className=\"body\">\n                            <b>StlMC</b> is provided as a python package. To install the tool, simply type the following instruction.\n                            <SyntaxHighlighter className=\"title-container\" language=\"bash   \" style={atelierForestLight}>\n                                {`pip install -i https://test.pypi.org/simple/ stlmc==0.1.0.dev4`}\n                            </SyntaxHighlighter>\n                            <div className=\"title\">Language dependencies</div>\n                            <b>StlMC</b> is mainly written in python. Specifically, its functionalities are written in python and the language parser is written with <b>Java</b> based program.\n                            The visualization server is developed with <b>golang</b> while its user interface\n                            is using <b>reactJS</b>. To build our tool from the scratch, the following languages are needed.\n                            <ul>\n                                <li><span className=\"lang\">python3</span>: <a href=\"https://www.python.org/downloads/\" target=\"_blank\">official web</a></li>\n                                <li><span className=\"lang\">golang</span>: <a href=\"https://golang.org/dl/\" target=\"_blank\">official web</a></li>\n                                <li><span className=\"lang\">nodejs</span>: <a href=\"https://nodejs.org/en/\" target=\"_blank\">official web</a></li>\n                                <li><span className=\"lang\">java</span>: <a href=\"https://openjdk.java.net/\" target=\"_blank\">official web</a></li>\n                            </ul>\n\n                            The latest stable version of stlMC tool source codes can be downloaded at\n                            <a href=\"https://github.com/stlmc/tool\" target=\"_blank\"> here</a>.\n                            Note that we recommend to use the tool with <span className=\"lang\">python3</span> virtual environment.\n                        </div>\n                        <div className=\"body\">\n                            <div className=\"title\">Library dependencies</div>\n                            As mentioned, the tool uses <span className=\"lang\">antlr4</span>, the Java program, for our language parser and\n                            <span className=\"lang\"> d3.js, typescript, react.js</span> for visualization part.\n                            The tool's core SMT solvers are <span className=\"lang\">python3</span> binding versions of each smt solver. So we need\n                            <b> Z3</b>, <b>Yices2</b> python packages. Also the ODE solving libraries such as <b>numpy</b> and <b>scipy</b> are need\n                            for the tool to support its ODE features.\n\n                            <div className=\"quote\">\n                                0.1.0dev4 are now available!\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport {IntroPage};","export class margin {\n    constructor(\n        public top: number = 0.0,\n        public right: number = 0.0,\n        public bottom: number = 0.0,\n        public left: number = 0.0,\n    ) {\n    }\n}\n\nexport class size {\n    constructor(\n        public width: number = 0.0,\n        public height: number = 0.0,\n    ) {\n    }\n}\n\nexport class PropData {\n    constructor(\n        // range of x, for example if your data start with 0 and\n        // end with 22.2 then, range will be [0, 22.2]\n        public range: number[] = [],\n        // interval_range is same as range but contains start and\n        // end points of every intervals.\n        // For example, if the interval range of each a : [0, 1], b : [1, 3]\n        // then, interval_range will be [0, 1, 3].\n        public interval_range: number[] = [],\n    ) {\n    }\n}","import * as d3 from 'd3';\nimport $ from \"jquery\";\nimport \"./MainRenderer.scss\";\n\nclass ModeRenderer {\n\n\n    constructor(\n        _size,\n        _margin_viewer,\n        _index,\n        _jd = '',\n    ) {\n        this.axis_delta = 50.0;\n        this.x_clip_margin = 50.0;\n\n        // actual data point viewers height.\n        this.data_viewer_height = 60.0;\n\n        this._size = _size;\n        this._margin_viewer = _margin_viewer;\n        this._index = _index;\n        this._tag = \"#mode\" + this._index;\n        this._jd = _jd;\n\n    }\n\n    clear(){\n        d3.select(this._tag).selectAll(\"#mode_svg\").remove();\n    }\n\n    loadGraph(maxX, data, xrange, yrange, type, min, max) {\n        this.dataXrange = maxX;\n        this.xrange = xrange;\n\n\n        if (yrange.length === 0){\n            return 0;\n        }\n        let uniqueNum = 0;\n        let sim = [];\n        for (let elem of yrange){\n            if (!sim.includes(elem)){\n                sim.push(elem);\n                uniqueNum += 1;\n            }\n        }\n\n        d3.select(this._tag).selectAll(\"#mode_svg\").remove();\n\n        // set main canvas\n        this.canvas = d3.select(this._tag).append(\"svg\").attr(\"id\", \"mode_svg\")\n            .attr(\"width\", this._size.width).attr(\"height\", this._size.height);\n\n        // set canvas front\n        this.modeCanvas = this.canvas.append(\"g\")\n            .attr(\"id\", \"modeCanvas\" + this._index)\n            .attr(\"clip-path\", \"url(#modeCanvasClip\" + this._index + \")\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 0 + \")\");\n\n\n        this.canvas.append(\"clipPath\")\n            .attr(\"id\", \"modeCanvasClip\" + this._index)\n            .append(\"rect\")\n            .attr(\"width\", this._size.width)\n            .attr(\"height\", this.data_viewer_height);\n\n\n        // set data canvas\n        // Add scale error to make lines fit the view box.\n        // TODO: Update formula for error. Divide by 10 is not optimal.\n        let XscaleError = (this.dataXrange[1] - this.dataXrange[0]) / 10;\n        this.YscaleError = (max - min) / 10;\n\n        // Set scale function for x.\n        // Clipping margin does the correction of calculate length of x axis.\n        // X axis is move this.x_clip_margin by below code.\n        this.Xscale = d3.scaleLinear()\n            .domain([this.dataXrange[0], this.dataXrange[1] + XscaleError])\n            .range([0, this._size.width]);\n\n\n        if (type == \"bool\"){\n            // set scale function for y\n            // 0: none, 1: false, 2: true, 3:none\n            this.Yscale =\n                d3.scaleLinear()\n                    .domain([0, 3])\n                    .range([this.data_viewer_height, 0]);\n        } else {\n            // set scale function for y\n            this.Yscale =\n                d3.scaleLinear()\n                    .domain([min - this.YscaleError, max + this.YscaleError])\n                    .range([this.data_viewer_height, 0]);\n        }\n\n        this.min = min;\n        this.max = max;\n\n\n        let scaleX = this.Xscale;\n        let scaleY = this.Yscale;\n\n\n        // Add interval lines.\n        this.modeCanvasIntervalLines = this.modeCanvas.append(\"g\")\n            .attr(\"id\", \"modeCanvasIntervalLines\");\n\n        // tickValues is actual data line\n        // e.g) if you put [1, 2] in the tickValues than, it will draw line to x:1 and x:2.\n        this.modeCanvasIntervalLines.call(d3.axisBottom(scaleX).tickValues(this.xrange).tickSize(this._size.height).tickPadding(3).tickFormat(() => {\n            return \"\"\n        })).select(\".domain\").remove();\n\n\n        // Add x axis for propCanvas.\n        this.modeCanvasXaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"modeCanvasXaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + (this.data_viewer_height + 1) + \")\")\n            .call(d3.axisBottom(scaleX));\n\n        // Add y axis.\n        this.modeCanvasYaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"modeCanvasYaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 1 + \")\");\n\n        if(type === \"bool\"){\n            this.modeCanvasYaxis.call(d3.axisLeft(scaleY).ticks(4).tickFormat(\n                (d) => {\n                    if (d === 1) {\n                        return \"false\"\n                    } else if (d === 2) {\n                        return \"true\"\n                    } else {\n                        return \" \"\n                    }\n                }));\n        }\n        else if(type === \"int\"){\n            let yRealRange = yrange.map((e) => {\n                return parseInt(e);\n            });\n            this.modeCanvasYaxis.call(d3.axisLeft(scaleY).tickValues(sim).tickFormat(\n                (d, i) => {\n                    return sim[i];\n                }\n            ));\n        } else if(type === \"real\"){\n            let yRealRange = yrange.map((e) => {\n                return parseFloat(e);\n            });\n            this.modeCanvasYaxis.call(d3.axisLeft(scaleY).tickValues(sim).tickFormat(\n                (d, i) => {\n                    return sim[i];\n                }\n            ));\n        }\n\n        // update when redraw, remove previous proposition graph.\n        this.modeGraph = this.modeCanvas\n            .selectAll(\"#modeLines\"+this._index)\n            .append(\"g\")\n            .data(data)\n            .enter();\n\n\n        // set proposition graph line generator\n        this.modeLineGenerator = d3.line()\n            .x(function (d) {\n                return scaleX(d[0]);\n            })\n            .y(function (d) {\n                return scaleY(d[1]);\n            }).curve(d3.curveMonotoneX);\n\n        let modeLineG = this.modeLineGenerator;\n        /**\n         * this is actual data of proposition graph\n         */\n        this.modeGraph\n            .append(\"path\")\n            .attr(\"d\", (d) => {\n                return modeLineG(d);\n            })\n            .attr(\"id\", \"modeLines\"+this._index)\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 1.5);\n\n    }\n\n    getXscale(){\n        return this.Xscale;\n    }\n\n    getYscale(){\n        return this.Yscale;\n    }\n\n\n\n}\n\nexport {ModeRenderer};","import * as d3 from 'd3';\nimport $ from \"jquery\";\nimport \"./MainRenderer.scss\";\n\nclass Renderer {\n\n\n    constructor(\n        _size,\n        _margin_viewer,\n        _index,\n        _jd = ''\n    ) {\n        this.axis_delta = 50.0;\n        this.x_clip_margin = 50.0;\n\n        this._size = _size;\n        this._margin_viewer = _margin_viewer;\n        this._index = _index;\n        this._tag = \"#graph\" + this._index;\n        this._jd = _jd;\n        this.data_viewer_height = this._size.height - 20.0;\n    }\n\n\n    get graph() {\n        return this._graph;\n    }\n\n    set graph(graph) {\n        this._graph = graph;\n    }\n\n    clear() {\n        d3.select(this._tag).selectAll(\"#main_svg\").remove();\n    }\n\n    loadGraph(maxX, maxY, l, xdata, pdata, vardict, modeSize, subXscale, subYscale) {\n        this.refData = l;\n        d3.select(this._tag).selectAll(\"#main_svg\").remove();\n        d3.select(this._tag).selectAll(\"#main_svg_info\").remove();\n\n        this.canvas = d3.select(this._tag).append(\"svg\").attr(\"id\", \"main_svg\")\n            .attr(\"width\", this._size.width).attr(\"height\", this._size.height);\n\n        let fps = d3.select(\"#graph span\");\n\n        let t0 = Date.now(), t1;\n\n        d3.timer(function () {\n\n            t1 = Date.now();\n            fps.text(Math.round(1000 / (t1 - t0)) + \" fps\");\n            t0 = t1;\n        });\n\n        // set data canvas\n        this.graphCanvas = this.canvas.append(\"g\")\n            .attr(\"id\", \"graphCanvas\" + this._index)\n            .attr(\"clip-path\", \"url(#graphCanvasClip\" + this._index + \")\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 0 + \")\");\n\n\n        this.canvas.append(\"clipPath\")\n            .attr(\"id\", \"graphCanvasClip\" + this._index)\n            .append(\"rect\")\n            .attr(\"width\", this._size.width)\n            .attr(\"height\", this.data_viewer_height);\n\n        this.graphCanvasFront =\n            this.graphCanvas.append(\"g\");\n\n        // Color scale for line plot in dataCanvas.\n        // This will automatically add colors to your lines.\n        this.colorScale = d3.scaleOrdinal(d3.schemeCategory10);\n\n\n        // Get original data's x's and y's extent.\n        // Will slow loading since json.data.xRange() itself need lots of calculations.\n        // Need to be removed soon.\n        this.dataXrange = maxX;\n        this.dataYrange = maxY;\n\n        // Add scale error to make lines fit the view box.\n        // TODO: Update formula for error. Divide by 10 is not optimal.\n        let XscaleError = (this.dataXrange[1] - this.dataXrange[0]) / 10;\n        let YscaleError = (this.dataYrange[1] - this.dataYrange[0]) / 10;\n\n        // Set scale function for x.\n        // Clipping margin does the correction of calculate length of x axis.\n        // X axis is move this.x_clip_margin by below code.\n        this.dataCanvasXscale = d3.scaleLinear()\n            .domain([this.dataXrange[0], this.dataXrange[1] + XscaleError])\n            .range([0, this._size.width]);\n\n        // Set scale function for y.\n        // This process will do the same thing as x.\n        this.dataCanvasYscale = d3.scaleLinear()\n            .domain([this.dataYrange[0] - YscaleError, this.dataYrange[1] + YscaleError])\n            .range([this.data_viewer_height, 0]);\n\n        this.dataCanvasXscaleZoom = this.dataCanvasXscale;\n        this.dataCanvasYscaleZoom = this.dataCanvasYscale;\n\n        // Add scaling function generators for x and y.\n        let make_y_grid = () => {\n            return d3.axisBottom(this.dataCanvasXscale);\n        };\n        let make_x_grid = () => {\n            return d3.axisLeft(this.dataCanvasYscale);\n        };\n\n        // Add this Grid xis first. If not, left y axis will overlap with grid axis.\n        this.graphCanvasXaxisGrid = this.graphCanvas.append(\"g\")\n            .attr(\"id\", \"graphCanvasXaxisGrid\" + this._index)\n            .attr(\"class\", \"XaxisGrid\");\n\n        this.graphCanvasXaxisGrid.call(make_y_grid()\n            .tickSize(this._size.height)\n            .tickPadding(10)\n            .tickFormat(() => {\n                return \"\";\n            }))\n            .select(\".domain\").remove();\n\n        this.graphCanvasYaxisGrid = this.graphCanvas.append(\"g\")\n            .attr(\"id\", \"graphCanvasYaxisGrid\" + this._index)\n            .attr(\"class\", \"YaxisGrid\");\n\n        // -this._size.width will mirroring the position.\n        this.graphCanvasYaxisGrid.call(make_x_grid()\n            .tickSize(-this._size.width)\n            .tickPadding(10)\n            .tickFormat(() => {\n                return \"\";\n            }))\n            .select(\".domain\").remove();\n\n        // Add clipping path.\n        // If you are adding clipping path without margin, your zero of your axis will get lost.\n        // Add x and y axis to dataCanvas.\n        this.graphCanvasXaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"graphCanvasXaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + (this.data_viewer_height + 1) + \")\")\n            .call(d3.axisBottom(this.dataCanvasXscale));\n\n        this.graphCanvasYaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"graphCanvasYaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 1 + \")\")\n            .call(d3.axisLeft(this.dataCanvasYscale));\n\n\n\n\n\n\n        // <--------- start of brush ------------>\n\n        // let idleTimeout;\n        // function idled() { idleTimeout = null; }\n        //\n        //\n        // let brush = d3.brushX()\n        //     .extent([[0,0], [this._size.width - 2 * this.x_clip_margin, this.data_viewer_height]])\n        //     .on(\"end\", ()=>{\n        //         let extent = d3.event.selection;\n        //\n        //         // If no selection, back to initial coordinate. Otherwise, update X axis domain\n        //         if(!extent){\n        //             if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n        //             this.dataCanvasXscale.domain([0,xdata[xdata.length-1]])\n        //         }else{\n        //             this.dataCanvasXscale.domain([ this.dataCanvasXscale.invert(extent[0]), this.dataCanvasXscale.invert(extent[1]) ]);\n        //             this.canvas.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n        //         }\n        //\n        //         // Update axis and circle position\n        //         this.graphCanvasXaxis.transition().duration(1000).call(d3.axisBottom(this.dataCanvasXscale));\n        //         // this.canvas\n        //         //     .selectAll(\"circle\")\n        //         //     .transition().duration(1000)\n        //         //     .attr(\"cx\", function (d) { return x(d.Sepal_Length); } )\n        //         //     .attr(\"cy\", function (d) { return y(d.Petal_Length); } )\n        //\n        //         // Update lines positions.\n        //         // Update position first and then rendering it\n        //         // Make new line scale functions using latest scale functions.\n        //         this.lineGenerator = d3.line()\n        //             .x((d) => {\n        //                 return this.dataCanvasXscale(d[0]);\n        //             })\n        //             .y((d) => {\n        //                 return this.dataCanvasYscale(d[1]);\n        //             })\n        //             .curve(d3.curveMonotoneX);\n        //\n        //         this.lineGraph.selectAll(\".lines\")\n        //             .each((d) => {\n        //                 d.newX = this.lineGenerator(d);\n        //             });\n        //\n        //         this.lineGraph.selectAll(\".lines\")\n        //             .transition().duration(1000)\n        //             .attr(\"d\", (d) => {\n        //                 return d.newX;\n        //             });\n        //\n        //     });\n        //\n        // this.canvas.append(\"g\").attr(\"class\", \"brush\").call(brush);\n\n        // <------------ end of brush --------------->\n\n\n\n\n\n        // Add zoom function to dataCanvas\n        this.zoom = d3.zoom()\n            .extent([[0, 0], [this._size.width, this.data_viewer_height]])\n            .scaleExtent([1, Infinity])\n            .translateExtent([[0, -this.dataYrange[1]], [Infinity, Infinity]])\n            .on(\"zoom\", () => {\n\n                // Update scale functions to zoomed ones.\n                this.dataCanvasXscaleZoom = d3.event.transform.rescaleX(this.dataCanvasXscale);\n                this.dataCanvasYscaleZoom = d3.event.transform.rescaleY(this.dataCanvasYscale);\n\n                // Update axis.\n                this.graphCanvasXaxis.call(d3.axisBottom(this.dataCanvasXscaleZoom));\n                this.graphCanvasYaxis.call(d3.axisLeft(this.dataCanvasYscaleZoom));\n\n                //d3.selectAll(\"#graphCanvasXaxis\").call(d3.axisBottom(this.dataCanvasXscaleZoom));\n                //d3.selectAll(\"#graphCanvasYaxis\").call(d3.axisLeft(this.dataCanvasYscaleZoom));\n\n\n                //this.propCanvasXaxis.call(d3.axisBottom(this.dataCanvasXscaleZoom));\n                d3.selectAll(\"#propCanvasXaxis\").call(d3.axisBottom(this.dataCanvasXscaleZoom));\n                d3.selectAll(\"#propCanvasIntervalLines\").call(d3.axisBottom(this.dataCanvasXscaleZoom).tickValues(pdata).tickSize(100).tickPadding(3).tickFormat(() => {\n                    return \"\"\n                })).select(\".domain\").remove();\n\n                d3.selectAll(\"#modeCanvasXaxis\").call(d3.axisBottom(this.dataCanvasXscaleZoom));\n                d3.selectAll(\"#modeCanvasIntervalLines\").call(d3.axisBottom(this.dataCanvasXscaleZoom).tickValues(pdata).tickSize(100).tickPadding(3).tickFormat(() => {\n                    return \"\"\n                })).select(\".domain\").remove();\n\n\n                this.propCanvasYscale =\n                    d3.scaleLinear()\n                        .domain([0, 3])\n                        .range([60.0, 0]);\n\n\n                // Make new line scale functions using latest scale functions.\n                this.lineGenerator = d3.line()\n                    .x((d) => {\n                        return this.dataCanvasXscaleZoom(d[0]);\n                    })\n                    .y((d) => {\n                        return this.dataCanvasYscaleZoom(d[1]);\n                    })\n                    .curve(d3.curveMonotoneX);\n\n                this.lineGenerator2 = d3.line()\n                    .x((d) => {\n                        return this.dataCanvasXscaleZoom(d[0]);\n                    })\n                    .y((d) => {\n                        return this.propCanvasYscale(d[1]);\n                    })\n                    .curve(d3.curveMonotoneX);\n\n\n                d3.selectAll(\".propLines\")\n                    .attr(\"d\", (d) => {\n                        return this.lineGenerator2(d);\n                    });\n\n\n                // update mode variable scale\n                for(let i = 0; i < modeSize; i++){\n                    let lineG = d3.line()\n                        .x((d) => {\n                            return this.dataCanvasXscaleZoom(d[0]);\n                        })\n                        .y((d) => {\n                            return subYscale[i](d[1]);\n                        }).curve(d3.curveMonotoneX);\n\n                    d3.selectAll(\"#modeLines\"+i)\n                        .attr(\"d\", (d)=>{\n                            return lineG(d);\n                        })\n                }\n\n\n\n                // Update lines positions.\n                // Update position first and then rendering it\n                this.lineGraph.selectAll(\".lines\")\n                    .each((d) => {\n                        d.newX = this.lineGenerator(d.data);\n                    });\n\n                this.lineGraph.selectAll(\".lines\")\n                    .attr(\"d\", (d) => {\n                        return d.newX;\n                    });\n\n\n                // // calculating mouse position\n                // let mouse = d3.mouse($(\"#graphCanvas\" + this._index)[0]);\n                // let pos = this.dataCanvasXscaleZoom.invert(mouse[0]);\n                // let bisectDate = d3.bisector((d) => {\n                //     return d[0];\n                // }).left;\n                // let bisectData = bisectDate(this.refData, pos);\n                //\n                // if (this.refData.length - 1 < bisectData) {\n                //     bisectData = this.refData.length - 1;\n                // }\n                // if (bisectData === 0) {\n                //     bisectData = 1;\n                // }\n                // let d0 = this.refData[bisectData - 1];\n                // let d1 = this.refData[bisectData];\n                //\n                // // work out which date value is closest to the mouse\n                // let final_data = pos - d0[0] > d1[0] - pos ? d1 : d0;\n                // let x = this.dataCanvasXscaleZoom(final_data[0]);\n                // let y = this.dataCanvasYscaleZoom(final_data[1]);\n                //\n                // // Add focusing circle.\n                // this.lineGraph.selectAll(\"#focusCircle\")\n                //     .attr('cx', x)\n                //     .attr('cy', (d, i) => {\n                //         let d0 = (l)[bisectData - 1];\n                //         let d1 = (l)[bisectData];\n                //         //console.log(dd1)\n                //         let final_data = pos - d0[0] > d1[0] - pos ? d1 : d0;\n                //         return this.dataCanvasYscaleZoom(final_data[1]);\n                //     });\n\n            });\n\n        this.tooltip = d3.select(this._tag)\n            .append(\"div\")\n            .attr(\"id\", \"tooltip\")\n            .style(\"position\", \"absolute\")\n            .style(\"visibility\", \"hidden\")\n            .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n            .style(\"border\", \"solid\")\n            .style(\"border-width\", \"1px\")\n            .style(\"border-radius\", \"5px\")\n            .style(\"padding\", \"10px\");\n\n\n\n        this.drawGraph(l, xdata, vardict);\n\n    }\n\n\n    drawGraph(l, xdata, vardict) {\n\n        let color = d3.scaleOrdinal()\n            .domain(vardict)\n            .range(d3.schemeTableau10);\n\n        let newDataList = [];\n        let nameList = [];\n        for(let [k, v] of l){\n            let elem = {\n                name: k,\n                data: v\n            };\n            newDataList.push(elem);\n            nameList.push(k);\n        }\n        let infoHeight = nameList.length * 30;\n\n\n        this.InfoCanvas = d3.select(this._tag).append(\"svg\").attr(\"id\", \"main_svg_info\")\n            .attr(\"width\", this._size.width).attr(\"height\", infoHeight);\n\n        this.InfoCanvas.selectAll(\"dots\")\n            .data(nameList)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", 20)\n            .attr(\"cy\", (d, i) => {return 15 + i * 25})\n            .attr(\"r\", 7)\n            .style(\"fill\", (d)=> { return color(d) });\n\n\n        // Add one dot in the legend for each name.\n        this.InfoCanvas.selectAll(\"labels\")\n            .data(nameList)\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", 40)\n            .attr(\"y\", function(d,i){ return 15 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n            .style(\"fill\", function(d){ return color(d)})\n            .text(function(d){ return d})\n            .attr(\"text-anchor\", \"left\")\n            .style(\"alignment-baseline\", \"middle\");\n\n\n\n        let dataCanvasXscale = this.dataCanvasXscale;\n        let dataCanvasYscale = this.dataCanvasYscale;\n        this.lineGenerator = d3.line()\n            .x(function (d) {\n                return dataCanvasXscale(d[0]);\n            })\n            .y(function (d) {\n                return dataCanvasYscale(d[1]);\n            }).curve(d3.curveMonotoneX);\n\n        // add line to dataCanvas front where clipping path is added.\n        this.lineGraph = this.graphCanvas\n            .selectAll(\".lines\")\n            .append(\"g\")\n            .data(newDataList)\n            .enter();\n\n        this.lineGraph.append(\"path\")\n            .attr(\"d\", (d) => {\n                // let res = \"\";\n                // console.log(d);\n                // for (let e of d) {\n                //     res += this.lineGenerator(e);\n                // }\n                // return res;\n                return this.lineGenerator(d.data);\n            })\n            .attr(\"class\", \"lines\")\n            .attr(\"stroke\", (d, i) => {\n                return color(d.name);\n            })\n            .attr(\"stroke-width\", 1.5)\n            .style(\"fill\", \"none\");\n\n\n\n\n\n\n        // TODO: Calculate initial circles positions.\n        // this.lineGraph.append('circle')\n        //     .attr(\"r\", 7)\n        //     .attr(\"stroke\", (d, i) => {\n        //         return this.lineGraphColor[d.name]\n        //     })\n        //     .style(\"stroke-width\", \"1px\")\n        //     .attr('id', 'focusCircle')\n        //     .attr(\"transform\", () => {\n        //         return \"translate(0, -20)\"\n        //     })\n        //     .style(\"visibility\", \"hidden\")\n        //     .style(\"fill\", \"none\");\n\n        this.lineGraph.append(\"text\")\n            .attr('id', 'focusText')\n            .attr(\"transform\", () => {\n                return \"translate(2,\" + (this._margin_viewer.top - 3) + \")\"\n            })\n            .style(\"font-size\", () => {\n                return \"11px\"\n            })\n            .style(\"visibility\", \"hidden\");\n\n\n        // Distinguish between original one and redrawn one because of graph coloring\n\n\n        // TODO: Calculate initial circles positions.\n        // this.lineGraph.append('circle')\n        //     .attr(\"r\", 7)\n        //     .attr(\"stroke\", (d, i) => {\n        //         return this.lineGraphColor[d.name]\n        //     })\n        //     .style(\"stroke-width\", \"1px\")\n        //     .attr('id', 'focusCircle')\n        //     .attr(\"transform\", () => {\n        //         return \"translate(0, -20)\"\n        //     })\n        //     .style(\"visibility\", \"hidden\")\n        //     .style(\"fill\", \"none\");\n\n\n\n\n        let bisectDate = d3.bisector((d) => {\n            return d;\n        }).left;\n\n        let lineGraph = this.lineGraph;\n        let mainrect = this.graphCanvasFront\n            .append(\"rect\")\n            .attr(\"id\", \"mainrect\")\n            .attr('width', this._size.width - this.x_clip_margin)\n            .attr('height', this.data_viewer_height)\n            .attr(\"transform\", \"translate(\" + 0 + \",\" + 1 + \")\")\n            //.attr(\"clip-path\", \"url(#dataCanvasClip)\")\n            .style(\"fill-opacity\", \"0.0\")\n            .on(\"mouseover\", () => {\n                if (this.popup) {\n                    //tooltip.style(\"visibility\", \"visible\");\n                }\n                lineGraph.selectAll(\"#focusCircle\").style(\"visibility\", \"visible\");\n                lineGraph.selectAll(\"#focusText\").style(\"visibility\", \"visible\");\n            })\n            .on(\"mouseout\", function () {\n                //tooltip.style(\"visibility\", \"hidden\");\n                lineGraph.selectAll(\"#focusCircle\").style(\"visibility\", \"hidden\");\n                lineGraph.selectAll(\"#focusText\").style(\"visibility\", \"hidden\");\n            })\n            .on(\"mousemove\", () => {\n\n                // Get current mouse position.\n                let mouse = d3.mouse($(\"#graphCanvas\" + this._index)[0]);\n                let pos = this.dataCanvasXscaleZoom.invert(mouse[0]);\n\n                let bisectPos = bisectDate(xdata, pos);\n                if (bisectPos > 0 && xdata.length - 1 >= bisectPos) {\n                    // Choose close one, between 2 of them.\n                    let d0 = xdata[bisectPos - 1];\n                    let d1 = xdata[bisectPos];\n\n                    // work out which date value is closest to the mouse\n                    let final_data = pos - d0 > d1 - pos ? d1 : d0;\n                    let x = this.dataCanvasXscaleZoom(final_data);\n\n\n\n                    let tmpText = [];\n                    let tmpColor = [];\n                    this.lineGraph.selectAll(\"#focusText\")\n                        //.attr('x', x)\n                        // .attr('y', (d, i) => {\n                        //     // Another d0, d1.\n                        //     let d0 = (xdata)[bisectPos - 1];\n                        //     let d1 = (xdata)[bisectPos];\n                        //\n                        //     let final_data = pos - d0 > d1 - pos ? d1 : d0;\n                        //     return this.dataCanvasYscaleZoom(final_data);\n                        // })\n                        .text((d, i) => {\n                            let d0 = (xdata)[bisectPos - 1];\n                            let d1 = (xdata)[bisectPos];\n                            //console.log(dd1)\n                            let final_data = pos - d0 > d1 - pos ? d1 : d0;\n                            //let newY = this.dataCanvasYscaleZoom(final_data);\n                            //let tstring = vardict.get(0) + \"(\" + d3.format(\".2f\")(this.dataCanvasXscaleZoom.invert(mouse[0])) + \" , \" + d3.format(\".2f\")(this.dataCanvasYscaleZoom.invert(mouse[1])) + \")\";\n                            // if (!tmpText.includes(tstring)) {\n                            //     tmpText.push(tstring);\n                            //     tmpColor.push(d.name);\n                            // }\n                            //return tstring;\n                            return \"\"\n                        });\n\n\n                    // this.lineGraph.selectAll(\"#focusCircle\")\n                    //     .attr('cx', x)\n                    //     .attr('cy', (d, i) => {\n                    //         console.log(\"???\");\n                    //         let d0 = (xdata)[bisectPos - 1];\n                    //         let d1 = (xdata)[bisectPos];\n                    //         let final_data = pos - d0 > d1 - pos ? d1 : d0;\n                    //         return this.dataCanvasYscaleZoom(final_data);\n                    //     });\n                }\n            })\n            .call(this.zoom);\n    }\n\n}\n\nexport {Renderer};","import * as d3 from 'd3';\nimport $ from \"jquery\";\nimport \"./MainRenderer.scss\";\n\nclass PropositionRenderer {\n\n\n    constructor(\n        _size,\n        _margin_viewer,\n        _index,\n        _jd = '',\n    ) {\n        this.axis_delta = 50.0;\n        this.x_clip_margin = 50.0;\n\n        // actual data point viewers height.\n        this.data_viewer_height = 60.0;\n\n        this._size = _size;\n        this._margin_viewer = _margin_viewer;\n        this._index = _index;\n        this._tag = \"#proposition\" + this._index;\n        this._jd = _jd;\n\n    }\n\n    clear(){\n        d3.select(this._tag).selectAll(\"#prop_svg\").remove();\n    }\n\n    loadGraph(maxX, data, xrange) {\n        this.dataXrange = maxX;\n        this.xrange = xrange;\n\n        d3.select(this._tag).selectAll(\"#prop_svg\").remove();\n\n        // set main canvas\n        this.canvas = d3.select(this._tag).append(\"svg\").attr(\"id\", \"prop_svg\")\n            .attr(\"width\", this._size.width).attr(\"height\", this._size.height);\n\n        // set canvas front\n        this.propCanvas = this.canvas.append(\"g\")\n            .attr(\"id\", \"propCanvas\" + this._index)\n            .attr(\"clip-path\", \"url(#propCanvasClip\" + this._index + \")\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 0 + \")\");\n\n        // set data canvas\n        // Add scale error to make lines fit the view box.\n        // TODO: Update formula for error. Divide by 10 is not optimal.\n        let XscaleError = (this.dataXrange[1] - this.dataXrange[0]) / 10;\n\n\n        // Set scale function for x.\n        // Clipping margin does the correction of calculate length of x axis.\n        // X axis is move this.x_clip_margin by below code.\n        this.Xscale = d3.scaleLinear()\n            .domain([this.dataXrange[0], this.dataXrange[1] + XscaleError])\n            .range([0, this._size.width]);\n\n        // set scale function for y\n        // 0: none, 1: false, 2: true, 3:none\n        this.Yscale =\n            d3.scaleLinear()\n                .domain([0, 3])\n                .range([this.data_viewer_height, 0]);\n\n\n\n        this.canvas.append(\"clipPath\")\n            .attr(\"id\", \"propCanvasClip\" + this._index)\n            .append(\"rect\")\n            .attr(\"width\", this._size.width)\n            .attr(\"height\", this.data_viewer_height);\n\n\n\n\n        let scaleX = this.Xscale;\n        let scaleY = this.Yscale;\n\n\n        // Add interval lines.\n        this.propCanvasIntervalLines = this.propCanvas.append(\"g\")\n            .attr(\"id\", \"propCanvasIntervalLines\")\n            //.attr(\"transform\", \"translate(\" + 0 + \",\" + (-50) + \")\");\n\n        // tickValues is actual data line\n        // e.g) if you put [1, 2] in the tickValues than, it will draw line to x:1 and x:2.\n        this.propCanvasIntervalLines.call(d3.axisBottom(scaleX).tickValues(this.xrange).tickSize(this._size.height).tickPadding(3).tickFormat(() => {\n            return \"\"\n        })).select(\".domain\").remove();\n\n\n        // Add x axis for propCanvas.\n        this.propCanvasXaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"propCanvasXaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + (this.data_viewer_height + 1) + \")\")\n            .call(d3.axisBottom(scaleX));\n\n        // Add y axis.\n        this.propCanvasYaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"propCanvasYaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 1 + \")\");\n\n        this.propCanvasYaxis.call(d3.axisLeft(scaleY).ticks(4).tickFormat(\n            (d) => {\n                if (d === 1) {\n                    return \"false\"\n                } else if (d === 2) {\n                    return \"true\"\n                } else {\n                    return \" \"\n                }\n            }));\n\n        // update when redraw, remove previous proposition graph.\n        this.propGraph = this.propCanvas\n            .selectAll(\".propLines\")\n            .append(\"g\")\n            .data(data)\n            .enter();\n\n\n        // set proposition graph line generator\n        this.propLineGenerator = d3.line()\n            .x(function (d) {\n                return scaleX(d[0]);\n            })\n            .y(function (d) {\n                return scaleY(d[1]);\n            }).curve(d3.curveMonotoneX);\n\n        let propLineG = this.propLineGenerator;\n        /**\n         * this is actual data of proposition graph\n         */\n        this.propGraph\n            .append(\"path\")\n            .attr(\"d\", (d) => {\n                return propLineG(d);\n            })\n            .attr(\"class\", \"propLines\")\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 1.5);\n\n    }\n\n}\n\nexport {PropositionRenderer};","/**\n * Basic wrapper class for *visualize* **project**.\n * This class uses MathModel's objects and this class is extremely specific\n * to certain project. Do not reuse this class. This is just wrapper class!\n *\n * Written by Geunyeol Ryu\n * @ 2019.06.22\n */\n\n/**\n * Packages.\n */\n\nexport interface Proposition {\n    name: string;\n    actual: string;\n    data: [number, number][][];\n}\n\nexport interface IntervalInfo {\n    intIndex: number;\n    range: number[];\n    data: number[];\n}\n\nexport interface Mode {\n    name: string;\n    type: string;\n    actual: string[];\n    data: [number, number][][];\n    min: number;\n    max: number;\n    originalData: string[];\n}\n\nexport interface Interval {\n    name: string;\n    points: [number, number][][];\n}\n\nexport interface Interval4List {\n    index: number;\n    interval: Interval[];\n}\n\nclass Json {\n    /**\n     * Internally has intervals.\n     */\n\n    // intervals map needs to be different of each graphs.\n    // you will have many different graphs..\n    private _intervalsMap: Map<number, Map<number, Interval[]>> = new Map<number, Map<number, Interval[]>>();\n    private _intervalVarMap: Map<number, string[]> = new Map<number, string[]>();\n    private _dataByNameMap: Map<number, Map<string, [number, number][]>> = new Map<number, Map<string, [number, number][]>>();\n\n    private _xRangeMap: Map<number, [number, number]> = new Map<number, [number, number]>();\n    private _yRangeMap: Map<number, [number, number]> = new Map<number, [number, number]>();\n    private _graph_size: number = 0;\n\n    private maxX: number = 0.0;\n    private minX: number = 0.0;\n    private totalMaxX: number = 0.0;\n    private totalMinX: number = 0.0;\n    private _isEmpty: Boolean = true;\n    private _var_list: string[] = [];\n    private _x_data_list: number[] = [];\n\n    private _interval_flat_list: number[] = [];\n    // Array of propositions. [\"x>1\", \"x<0\", ...]\n\n    private _interval_info: Map<number, IntervalInfo> = new Map<number, IntervalInfo>();\n    // i'th graph with auto interval and proposition\n    private _propMap: Map<number, Proposition> = new Map<number, Proposition>();\n    private _modeMap: Map<number, Mode> = new Map<number, Mode>();\n\n    /**\n     *\n     * @param _jsonString String parsing by internal json parser to string.\n     */\n    constructor(\n        private _jsonString: string = \"\"\n    ) {\n        //...\n    }\n\n    xRange(index: number): ([number, number] | undefined) {\n        return this._xRangeMap.get(index);\n    }\n\n    yRange(index: number): ([number, number] | undefined) {\n        return this._yRangeMap.get(index);\n    }\n\n    get variables() {\n        return this._var_list;\n    }\n\n    get xlist() {\n        return this._x_data_list;\n    }\n\n    // graph with number, each number is interval...\n    GetGraph(index: number): (Map<number, Interval[]> | undefined) {\n        return this._intervalsMap.get(index)\n    }\n\n    // graph with number, each number is interval...\n    GetGraph2List(index: number): (Interval4List[]) {\n        let res = [];\n        for (let i = 0; i < this._intervalsMap.size; i++){\n            let intv = this._intervalsMap.get(index);\n            if (intv){\n                let intvElem = intv.get(i);\n                if (intvElem){\n                    let newI = {\n                        index: i,\n                        interval: intvElem,\n                    };\n                    res.push(newI);\n                }\n            }\n        }\n        return res;\n    }\n\n    GetVar(index:number): (string[] | undefined) {\n        return this._intervalVarMap.get(index);\n    }\n\n    GetGraphSize(): number {\n        return this._graph_size;\n    }\n\n    GetIntervalSize(): number {\n        return this._intervalsMap.size;\n    }\n\n    GetIntervalInfo(index: number) {\n        return this._interval_info.get(index);\n    }\n\n    GetDataByName(index: number){\n        return this._dataByNameMap.get(index);\n    }\n\n    GetModeSize() {\n        return this._modeMap.size;\n    }\n\n    GetMode(index: number) {\n        return this._modeMap.get(index);\n    }\n\n\n    GetIntervalInfoFlat() {\n        return this._interval_flat_list;\n    }\n\n    get varMap(){\n        return this._intervalVarMap;\n    }\n\n    get map() {\n        return this._intervalsMap;\n    }\n\n    get modeMap() {\n        return this._modeMap;\n    }\n\n    // Get data list related to intervals from map structure.\n    GetProp(index: number) {\n        return this._propMap.get(index);\n    }\n\n    get propMap() {\n        return this._propMap;\n    }\n\n    get propSize() {\n        return this._propMap.size;\n    }\n\n\n    get MaxX() {\n        return this.maxX;\n    }\n\n    get MinX() {\n        return this.minX;\n    }\n\n    get TotalMaxX() {\n        return this.totalMaxX;\n    }\n\n    get TotalMinX() {\n        return this.totalMinX;\n    }\n\n    IsInList(l:string[], elem:string){\n        for(let e of l){\n            if(e == elem){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    clearAll() {\n        this._intervalsMap.clear();\n        this._intervalVarMap.clear();\n        this._dataByNameMap.clear();\n        this._xRangeMap.clear();\n        this._yRangeMap.clear();\n        this._graph_size = 0;\n\n        this.maxX = 0.0;\n        this.minX = 0.0;\n        this.totalMaxX = 0.0;\n        this.totalMinX = 0.0;\n        this._isEmpty = true;\n        this._var_list = [];\n        this._x_data_list = [];\n\n        this._interval_flat_list = [];\n        // Array of propositions. [\"x>1\", \"x<0\", ...]\n\n        this._interval_info.clear();\n        // i'th graph with auto interval and proposition\n        this._propMap.clear();\n        this._modeMap.clear();\n    }\n\n    /**\n     * @params jsonString Simple string that looks like Json file.\n     */\n    set string(jsonString: string) {\n        this.clearAll();\n        this._jsonString = jsonString;\n        this.parse();\n    }\n\n    isEmpty(): Boolean {\n        return this._isEmpty;\n    }\n\n    /**\n     * Parsing interanl jsonString to make object.\n     */\n    parse = () => {\n        if (this._jsonString != \"\") {\n            // clear all element in intervals list.\n\n            this.clearAll();\n            this._isEmpty = false;\n            // https://dmitripavlutin.com/how-to-iterate-easily-over-object-properties-in-javascript/\n            // need to take both key and value.\n            let [variable, interval, dataByName, prop, mode, xdata, intervalInfo, full_interval_range] = Object.values(this._jsonString);\n            this._interval_flat_list = Object.values(full_interval_range).map((e) => {\n                return parseFloat(e);\n            });\n\n            // get interval info\n            for (let [okey, ovalue] of Object.entries(intervalInfo)) {\n                let [interval_index, interval_range, interval_data] = Object.values(ovalue);\n                let tmp: IntervalInfo = {\n                    intIndex: parseInt(interval_index),\n                    range: Object.values(interval_range).map((e) => {\n                        return parseFloat(e)\n                    }),\n                    data: Object.values(interval_data).map((e) => {\n                        return parseFloat(e)\n                    }),\n                };\n                this._interval_info.set(parseInt(interval_index), tmp);\n            }\n\n\n            // get mode\n            let counter_mode = 0;\n            for (let [okey, ovalue] of Object.entries(mode)) {\n                let [mode_name, mode_type, mode_data] = Object.values(ovalue);\n                let data = Object.values(mode_data);\n\n                let intv_data_set: [number, number][][] = [];\n                let min = 0.0;\n                let max = 0.0;\n                for (let ii2 = 0; ii2 < this._interval_info.size; ii2++) {\n                    let numnumlist: [number, number][] = [];\n                    let iifg = this._interval_info.get(ii2);\n                    if (iifg) {\n                        // Todo: not right....\n                        if (mode_type == \"bool\"){\n                            max = 3;\n                            numnumlist = iifg.data.map((e) => {\n                                return data[ii2] == \"True\" ? [e, 2] : [e, 1];\n                            });\n                        } else if (mode_type == \"int\") {\n                            numnumlist = iifg.data.map((e) => {\n                                let yy = parseInt(data[ii2]);\n                                if (yy < min){\n                                    min = yy;\n                                }\n                                if (yy > max){\n                                    max = yy;\n                                }\n                                return [e, yy];\n                            });\n                        } else if (mode_type == \"real\") {\n                            numnumlist = iifg.data.map((e) => {\n                                let yy = parseFloat(data[ii2]);\n                                if (yy < min){\n                                    min = yy;\n                                }\n                                if (yy > max){\n                                    max = yy;\n                                }\n                                return [e, yy];\n                            });\n                        }\n                        // Todo update it.\n                    }\n                    intv_data_set.push(numnumlist);\n                }\n\n                let tmp_mode: Mode = {\n                    name: mode_name,\n                    type: mode_type,\n                    actual: data,\n                    data: intv_data_set,\n                    min: min,\n                    max: max,\n                    originalData: data,\n                };\n                this._modeMap.set(counter_mode, tmp_mode);\n                counter_mode++;\n            }\n\n            // get proposition\n            let counter = 0;\n            for (let [okey, ovalue] of Object.entries(prop)) {\n                let [prop_name, prop_actual, prop_data] = Object.values(ovalue);\n                let data = Object.values(prop_data);\n\n                let intv_data_set: [number, number][][] = [];\n                for (let ii2 = 0; ii2 < this._interval_info.size; ii2++) {\n                    let numnumlist: [number, number][] = [];\n                    let iifg = this._interval_info.get(ii2);\n                    if (iifg) {\n                        numnumlist = iifg.data.map((e) => {\n                            return data[ii2] == \"True\" ? [e, 2] : [e, 1];\n                        });\n                    }\n                    intv_data_set.push(numnumlist);\n                }\n                let tmp_prop: Proposition = {\n                    name: prop_name,\n                    actual: prop_actual,\n                    data: intv_data_set,\n                };\n                this._propMap.set(counter, tmp_prop);\n                counter++;\n            }\n\n\n            this._var_list = Object.values(variable);\n            this._x_data_list = Object.values(xdata).map((s: string) => {\n                return parseFloat(s)\n            });\n            this._graph_size = interval.length;\n\n\n            // iterate through multiple sets of graphs.\n            for (let i = 0; i < interval.length; i++) {\n                let [index, graph, range] = Object.values(interval[i]);\n\n\n                let tmp = new Map<number, Interval[]>();\n                let varList: string[] = [];\n                for (let [k, v] of Object.entries(graph)) {\n                    let [name, intIndex, points] = Object.values(v);\n                    let intIndexInt = parseInt(intIndex);\n                    let intervals: Interval = {\n                        name: \"\",\n                        points: []\n                    };\n\n                    let tmp_interval: [number, number][] = [];\n                    if (!this.IsInList(varList, name)){\n                        varList.push(name);\n                    }\n\n                    for (let pv of points) {\n                        let [x, y] = Object.values(pv);\n                        tmp_interval.push([parseFloat(x), parseFloat(y)]);\n                    }\n                    intervals.name = name;\n                    intervals.points.push(tmp_interval);\n\n                    // check if is in list\n                    let getFromGraph = tmp.get(intIndexInt);\n\n                    // if exists\n                    if(getFromGraph){\n                        getFromGraph.push(intervals);\n                        tmp.set(intIndexInt, getFromGraph);\n                    } else {\n                        let elem = [];\n                        elem.push(intervals);\n                        tmp.set(intIndexInt, elem);\n                    }\n\n                }\n\n                this._intervalVarMap.set(parseInt(index), varList);\n                this._intervalsMap.set(parseInt(index), tmp);\n\n\n                let [maxX, minX, maxY, minY, m, m1, m2, m3] = Object.values(range);\n\n                this.maxX = parseFloat(maxX);\n                this.minX = parseFloat(minX);\n\n                this._xRangeMap.set(parseInt(index), [parseFloat(minX), parseFloat(maxX)]);\n                this._yRangeMap.set(parseInt(index), [parseFloat(minY), parseFloat(maxY)]);\n\n                //this._intervalsMap.set(parseInt(index), intervals);\n                if (i == 0) {\n                    this.totalMinX = parseFloat(minX);\n                    this.totalMaxX = parseFloat(maxX);\n                }\n            }\n\n            // get data by variable name\n            for (let i = 0; i < dataByName.length; i++) {\n                let [index, graph] = Object.values(dataByName[i]);\n                let intIndex = parseInt(index);\n\n\n                let tmp = new Map<string, [number, number][]>();\n                for (let [k, v] of Object.entries(graph)) {\n                    let [name, points] = Object.values(v);\n                    let tmp_data:[number, number][] = [];\n\n                    for (let pv of points) {\n                        let [x, y] = Object.values(pv);\n                        tmp_data.push([parseFloat(x), parseFloat(y)]);\n                    }\n                    tmp.set(name, tmp_data)\n                }\n\n                this._dataByNameMap.set(intIndex, tmp);\n\n            }\n        } else {\n            this._isEmpty = true;\n        }\n    };\n}\n\nexport {Json};","import React from 'react';\nimport styleVariable from './style/variable.module.scss';\nimport './style/LinePlotStyle.scss';\nimport '../../Style/scss/main.scss';\nimport {margin, PropData, size} from '../Core/Util/Util';\nimport {ModeRenderer} from '../Core/Renderer/ModeRenderer';\nimport {Renderer} from '../Core/Renderer/MainRenderer';\nimport {PropositionRenderer} from '../Core/Renderer/PropositionRenderer';\nimport {Json, Mode, Proposition} from '../Core/Util/DataParser';\nimport {Button, Form} from 'react-bootstrap';\nimport $ from 'jquery';\n\nimport {ModeState, PropState} from \"../Core/Data\";\n\n\n/*\n * Props and State\n */\ninterface Props {\n}\n\n\ninterface WorkspaceData {\n    title: string;\n    uid: number;\n}\n\ninterface ServerError {\n    message: string;\n    error: boolean;\n}\n\n\n// State contains many useful\ninterface State {\n    model: WorkspaceData[];\n    propState: PropState;\n    modeState: ModeState;\n\n    isCounterExm: boolean;\n\n    graphNum: number;\n\n    xlist: number[];\n    toggle: Map<number, boolean>;\n\n    isToggleChanged: boolean;\n\n    serverError: ServerError;\n}\n\n/*\n * LinePlot Component\n * no longer need constructors\n * https://medium.com/@martin_hotell/react-typescript-and-defaultprops-dilemma-ca7f81c661c7\n */\nclass LinePlot extends React.Component<Props, State> {\n\n    private width: number = parseFloat(styleVariable.width.replace(\"px\", \"\"));\n    private height: number = parseFloat(styleVariable.height.replace(\"px\", \"\"));\n\n    private margin_viewer_top: number = parseFloat(styleVariable.margin_viewer_top.replace(\"px\", \"\"));\n    private margin_viewer_right: number = parseFloat(styleVariable.margin_viewer_right.replace(\"px\", \"\"));\n    private margin_viewer_bottom: number = parseFloat(styleVariable.margin_viewer_bottom.replace(\"px\", \"\"));\n    private margin_viewer_left: number = parseFloat(styleVariable.margin_viewer_left.replace(\"px\", \"\"));\n\n\n    private renderers: Renderer[] = [];\n    private propRenderers: PropositionRenderer[] = [];\n    private modeRenderers: ModeRenderer[] = [];\n\n    private njson = new Json(require(\"../../model.json\"));\n\n    private base_margin = new margin(\n        this.margin_viewer_top,\n        this.margin_viewer_right,\n        this.margin_viewer_bottom,\n        this.margin_viewer_left\n    );\n\n\n    state: State = {\n        isCounterExm: false,\n        graphNum: 0,\n        model: [],\n\n\n        propState: {\n            isEnabled: new Map<number, boolean>(),\n            numOfGraph: 0,\n            propRenderers: [],\n            propMap: new Map<number, Proposition>(),\n            propData: new PropData(),\n        },\n\n        modeState: {\n            isEnabled: new Map<number, boolean>(),\n            numOfGraph: 0,\n            modeMap: new Map<number, Mode>(),\n        },\n\n        toggle: new Map<number, boolean>(),\n        isToggleChanged: false,\n        xlist: [],\n        serverError: {\n            message: \"\",\n            error: false,\n        },\n    };\n\n    constructor(props: Props) {\n        super(props);\n        // Set config defaults when creating the instance\n        this.Item = this.Item.bind(this);\n        this.ItemList = this.ItemList.bind(this);\n        this.Main = this.Main.bind(this);\n\n    }\n\n    async componentDidMount() {\n        // if no data is coming from server ...\n        this.njson.parse();\n        let gs = this.njson.GetGraphSize();\n        this.renderers = [];\n        let isRedBool = new Map<number, boolean>();\n\n        let width = $(window).width();\n        if (width) {\n            width = width * 0.8 - this.base_margin.left - this.base_margin.right;\n        }\n        let newSize = new size(\n            width,\n            80.0\n        );\n\n        for (let e = 0; e < gs; e++) {\n            let red = new Renderer(\n                new size(\n                    width,\n                    this.height\n                ), this.base_margin, e\n            );\n            red.graph = this.njson.GetGraph(e);\n            this.renderers.push(red);\n            isRedBool.set(e, true);\n        }\n\n        let isBoolean = new Map<number, boolean>();\n        this.propRenderers = [];\n        for (let e = 0; e < this.njson.propSize; e++) {\n            let tmp_prop = new PropositionRenderer(\n                newSize, this.base_margin, e\n            );\n            this.propRenderers.push(tmp_prop);\n            isBoolean.set(e, true);\n        }\n        ;\n\n        let modeIsBoolean = new Map<number, boolean>();\n        this.modeRenderers = [];\n        for (let e = 0; e < this.njson.GetModeSize(); e++) {\n            let md = new ModeRenderer(\n                newSize, this.base_margin, e\n            );\n            this.modeRenderers.push(md);\n            modeIsBoolean.set(e, true);\n        }\n\n        // get reloaded new variables.\n        for (let i = 0; i < this.njson.GetGraphSize() + this.njson.propSize; i++) {\n            this.state.toggle.set(i, true);\n        }\n\n        this.setState({\n            isCounterExm: true,\n            toggle: isRedBool,\n            graphNum: this.njson.GetGraphSize(),\n            xlist: this.njson.xlist,\n            propState: {\n                numOfGraph: this.njson.propSize,\n                propData: {\n                    range: [this.njson.TotalMinX, this.njson.TotalMaxX],\n                    interval_range: this.njson.GetIntervalInfoFlat(),\n                },\n                propRenderers: this.propRenderers,\n                propMap: this.njson.propMap,\n                isEnabled: isBoolean,\n            },\n            modeState: {\n                numOfGraph: this.njson.GetModeSize(),\n                modeMap: this.njson.modeMap,\n                isEnabled: modeIsBoolean,\n            }\n        });\n\n\n    }\n\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n\n        if (!this.njson.isEmpty()) {\n            let modeRenderersXScale = [];\n            let modeRenderersYScale = [];\n            for (let e = 0; e < this.njson.GetModeSize(); e++) {\n                let d = this.njson.GetMode(e);\n                if (d) {\n                    this.modeRenderers[e].loadGraph([this.njson.TotalMinX, this.njson.TotalMaxX], d.data, this.njson.GetIntervalInfoFlat(), d.originalData, d.type, d.min, d.max);\n                    modeRenderersXScale.push(this.modeRenderers[e].getXscale());\n                    modeRenderersYScale.push(this.modeRenderers[e].getYscale());\n                }\n\n            }\n            for (let e = 0; e < this.renderers.length; e++) {\n                let eGraph: (Map<string, [number, number][]> | undefined) = this.njson.GetDataByName(e);\n                if (eGraph) {\n                    // vardict should always exist or undefined error would occur!\n                    this.renderers[e].loadGraph(this.njson.xRange(e), this.njson.yRange(e), eGraph, this.state.xlist, this.njson.GetIntervalInfoFlat(), this.njson.variables, this.njson.GetModeSize(), modeRenderersXScale, modeRenderersYScale);\n                }\n            }\n\n\n            for (let e = 0; e < this.njson.propSize; e++) {\n                let d = this.njson.GetProp(e);\n                if (d) {\n                    this.propRenderers[e].loadGraph([this.njson.TotalMinX, this.njson.TotalMaxX], d.data, this.njson.GetIntervalInfoFlat());\n                }\n\n            }\n        }\n\n    }\n\n    Item(index: number, margin: number | undefined) {\n        let vars = this.njson.GetVar(index);\n        let isEnabled = this.state.toggle.get(index);\n        let label = \"unknown\";\n        if (vars) {\n            label = \"Var: \";\n            for (let i = 0; i < vars.length; i++) {\n                if (i == 0)\n                    label += vars[i];\n                else\n                    label += (\", \" + vars[i]);\n            }\n        }\n\n        return (\n            <div style={{marginLeft: margin, marginRight: margin}} key={index}>\n                <Form.Row>\n                    <Form.Check\n                        onChange={()=>{}}\n                        label={label}\n                        checked={isEnabled}\n                        onClick={() => {\n                            let newIsEnabled = this.state.toggle;\n                            if (isEnabled) {\n                                newIsEnabled.set(index, false)\n                                this.setState({\n                                    toggle: newIsEnabled,\n                                });\n\n                            } else {\n                                newIsEnabled.set(index, true)\n                                this.setState({\n                                    toggle: newIsEnabled,\n                                });\n                            }\n                        }\n                        }\n                    />\n                    <Form.Row>\n                        <div id={\"graph\" + index} style={{display: this.state.toggle.get(index) ? 'block' : 'none'}}>\n                            <span></span>\n                        </div>\n                    </Form.Row>\n                </Form.Row>\n            </div>\n        )\n    }\n\n    PropUI(index: number, margin: number | undefined) {\n        let prop = this.state.propState.propMap.get(index);\n        let isEnabled = this.state.propState.isEnabled.get(index);\n        let label = \"unknown\";\n        if (prop) {\n            label = prop.name + \" : \" + prop.actual;\n        }\n        return (\n            <div style={{marginLeft: margin, marginRight: margin}} key={index}>\n                <Form.Row>\n                    <Form.Check\n                        onChange={()=>{}}\n                        label={label}\n                        checked={isEnabled}\n                        onClick={() => {\n                            let newIsEnabled = this.state.propState.isEnabled;\n                            if (isEnabled) {\n                                newIsEnabled.set(index, false);\n                                this.setState({\n                                        propState: {\n                                            numOfGraph: this.state.propState.numOfGraph,\n                                            propMap: this.state.propState.propMap,\n                                            isEnabled: this.state.propState.isEnabled,\n                                            propData: this.state.propState.propData,\n                                            propRenderers: this.state.propState.propRenderers,\n                                        }\n                                    }\n                                );\n                            } else {\n                                newIsEnabled.set(index, true);\n                                this.setState({\n                                    propState: {\n                                        numOfGraph: this.state.propState.numOfGraph,\n                                        propMap: this.state.propState.propMap,\n                                        isEnabled: this.state.propState.isEnabled,\n                                        propData: this.state.propState.propData,\n                                        propRenderers: this.state.propState.propRenderers,\n                                    }\n                                });\n                            }\n                        }\n                        }\n                    />\n                    <Form.Row>\n                        <div className=\"svg_div\" id={\"proposition\" + index}\n                             style={{display: this.state.propState.isEnabled.get(index) ? 'block' : 'none'}}>\n                            <span></span>\n                        </div>\n                    </Form.Row>\n                </Form.Row>\n            </div>\n        )\n    }\n\n    ModeUI(index: number, margin: number | undefined) {\n\n        let label = \"unknown\";\n        let mod = this.state.modeState.modeMap.get(index);\n        if (mod) {\n            label = mod.name + \" = \" + mod.actual\n        }\n        let isBool = this.state.modeState.isEnabled.get(index);\n\n        return (\n            <div style={{marginLeft: margin, marginRight: margin}} key={index}>\n                <Form.Row>\n                    <Form.Check\n                        onChange={()=>{}}\n                        label={label}\n                        checked={isBool}\n                        onClick={() => {\n                            let newIs = this.state.modeState.isEnabled;\n                            if (isBool) {\n                                newIs.set(index, false);\n                                this.setState({\n                                    modeState: {\n                                        isEnabled: newIs,\n                                        modeMap: this.state.modeState.modeMap,\n                                        numOfGraph: this.state.modeState.numOfGraph,\n                                    }\n                                });\n\n                            } else {\n                                newIs.set(index, true);\n                                this.setState({\n                                    modeState: {\n                                        isEnabled: newIs,\n                                        modeMap: this.state.modeState.modeMap,\n                                        numOfGraph: this.state.modeState.numOfGraph,\n                                    }\n                                });\n                            }\n                        }\n                        }\n                    />\n                    <Form.Row>\n                        <div className=\"svg_div\" id={\"mode\" + index}\n                             style={{display: this.state.modeState.isEnabled.get(index) ? 'block' : 'none'}}>\n                        </div>\n                    </Form.Row>\n                </Form.Row>\n            </div>\n        )\n    }\n\n    ItemList() {\n        let res = [];\n        let res2 = [];\n        let res3 = [];\n        let margin = $(window).width();\n        if (margin) {\n            margin = 0;\n        }\n\n        for (let i = 0; i < this.state.graphNum; i++) {\n            res.push(this.Item(i, margin));\n        }\n        for (let i = 0; i < this.njson.propSize; i++) {\n            res2.push(this.PropUI(i, margin));\n        }\n\n        for (let i = 0; i < this.njson.GetModeSize(); i++) {\n            res3.push(this.ModeUI(i, margin));\n        }\n        return (\n            <Form>\n                {res3}\n                {res}\n                {res2}\n            </Form>\n        )\n\n    }\n\n    Main() {\n        return (\n            <div>\n                {!this.njson.isEmpty() ? (\n                    <div>\n                        <div className=\"row basic_box\">\n                            <div className=\"col-md-12\">\n                                <this.ItemList/>\n                            </div>\n                        </div>\n                    </div>) : (\n                    <div className=\"row line_plot_div\">\n                        <div className=\"col-md-1\"/>\n                        <div className=\"col-md-10 alert alert-warning\" role=\"alert\">\n                            No counter example, nothing to show!\n                        </div>\n                        <div className=\"col-md-1\"/>\n                    </div>\n                )}\n            </div>\n        )\n    }\n\n    render() {\n        // TODO: Update precision of graph after update.\n        return (\n            <div>\n                <this.Main/>\n            </div>);\n    }\n}\n\nexport default LinePlot;\n","import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'katex/dist/katex.min.css';\nimport katex from \"katex\";\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport {atelierForestLight} from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport LinePlot from \"./LinePlot/LinePlot\";\n\n\n/*\n * Props and State\n */\ninterface Props {\n}\n\ninterface State {\n}\n\n\nclass ExamplePage extends React.Component<Props, State> {\n    //private liteAdaptor:LiteAdaptor = new LiteAdaptor();\n    constructor(props: Props) {\n        super(props);\n        this.str2Math = this.str2Math.bind(this);\n    }\n\n    str2Math(str: string) {\n        return (\n            <span dangerouslySetInnerHTML={{\n                __html: katex.renderToString(str, {\n                    throwOnError: false\n                })\n            }}/>\n        )\n    }\n\n    render() {\n\n\n        return (\n            <div>\n                <div className=\"introduction-main\">\n                    <div className=\"article\">\n                        <div className=\"title\">Example</div>\n                        <hr/>\n                        <div className=\"body\">\n                            There is a heater in a room. When the temperature is low, the heater turns on, and when the temperature is high enough, the heater turns off.\n                            We want to check whether the heater satisfy two properties.\n                            The first is that the temperature is greater than 21 within 40 time units. We can rewrite the property as {this.str2Math(\"\\\\lozenge_{[0, 40]}(x > 21)\")} using STL syntax.\n\n                            The second is that if the heater turned off, the heater always turns on within 5 time units.\n                            We can rewrite the property as {this.str2Math(\"\\\\square_{[0,20]} \\\\; (h \\\\leq 0 \\\\Rightarrow \\\\lozenge_{[0.0,5.0]} \\\\; h > 0)\")} using STL syntax.\n                            <SyntaxHighlighter className=\"title-container\" language=\"python\" style={atelierForestLight}>\n                                {`stlmc -l 2 -u 3 -visualize true -solver yices example.model`}\n                            </SyntaxHighlighter>\n                            User can run the model using the above command.\n                            The command means run the model checking algorithm at bound 2 and 3 using Yices SMT solver.\n                            When the solver finishes its execution, save the result of the execution with visualizable data\n                            that can be used to draw the trajectory of the counterexample.\n                        </div>\n                    </div>\n                    <div className=\"article\">\n                        <div className=\"title\">\n                            Codes\n                        </div>\n                        <hr/>\n                        <div className=\"body\">\n                            The above example can be encoded in stlMC language as follows.\n                            <SyntaxHighlighter className=\"title-container\" language=\"python\" showLineNumbers={true}\n                                               style={atelierForestLight}>\n                                {`real h;\nreal start;\nconst real k = 0.025 ;\n(20, 30] x;\n\n{\n    mode:\n      (and (h = 0) (start >= 27)) ;\n    inv:\n      (and (x > 23) (x <= 30));\n    flow:\n      d/dt[x] = -k * ((1 - 2 * 0.01) * start);\n    jump:\n      (and (x > 24) (x < 27)) => \n         (and (h' >= 40) (h' <= 50) (start' = x) (x' = x)) ;\n      (and (x > 23) (x <= 25)) => \n         (and (h' >= 90) (h' < 100) (start' = x) (x' = x)) ;\n}\n\n{\n    mode:\n      (and (h > 0) (start <= 27)) ;\n    inv:\n      (and (x > 20) (x <= 29));\n    flow:\n      x(t) = 0.013 * h + k * (1 - 0.0246 * t) + 0.006 * (1 - 0.0442 * t) + x(0);\n    jump:\n      (x >= 27) => \n        (and (h' = 0) (start' = x) (x' = x)) ;\n}\n\ninit:\n(and (h = 0) (start = x) (x >= 27) (x <= 30) );\n\npropositions:\npowerOn = h > 0 ;\n\ngoal:\n(<> [0.0, 40.0] (x > 21)) ;\n([] [0.0, 20.0] (h <= 0 -> <>[0.0, 5.0] powerOn)) ;\n`}\n                            </SyntaxHighlighter>\n                        </div>\n                    </div>\n                    <div className=\"article\">\n                        <div className=\"title\">\n                            Visualization\n                        </div>\n                        <hr/>\n                        <div className=\"body\">\n                            User can see counter example easily using our visualization tool.\n                            <LinePlot/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport {ExamplePage};","import React from 'react';\nimport './App.scss';\nimport {IntroPage} from \"./Component/Element\";\nimport {\n  HashRouter as Router, Link,\n  Route,\n} from \"react-router-dom\";\nimport {ExamplePage} from \"./Component/Example\";\nimport {Button, ButtonToolbar, Nav, Navbar, OverlayTrigger, Tooltip} from \"react-bootstrap\";\n\nconst App: React.FC = () => {\n  return (\n      <Router basename='/'>\n        <div className=\"top-bar\">\n          <Navbar fixed=\"top\" bg=\"dark\">\n            <Navbar.Brand>\n              <Link to=\"/\"><span className=\"theme\">STLMC</span></Link>\n            </Navbar.Brand>\n            <Nav className=\"mr-auto\">\n              <Navbar.Text>\n                <ButtonToolbar>\n                  <OverlayTrigger\n                      placement=\"bottom\"\n                      overlay={\n                        <Tooltip id={`tooltip`}>\n                          Visit our <strong>{\"github!\"}</strong>\n                        </Tooltip>\n                      }\n                  >\n                    <Button variant=\"link\" href=\"https://github.com/stlmc/tool\">\n                      <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fab\" data-icon=\"github\" role=\"img\"\n                           xmlns=\"http://www.w3.org/2000/svg\" className=\"github-svg\" viewBox=\"0 0 496 512\">\n                        <path fill=\"#FFFFFF80\"\n                              d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\">\n\n                        </path>\n                      </svg>\n                    </Button>\n                  </OverlayTrigger>\n                </ButtonToolbar>\n              </Navbar.Text>\n            </Nav>\n            <Nav.Link>\n              <Link to=\"/example\"><span className=\"theme\">example</span></Link>\n            </Nav.Link>\n          </Navbar>\n        </div>\n        <Route exact path=\"/\">\n          <IntroPage/>\n        </Route>\n        <Route path=\"/example\">\n          <ExamplePage/>\n        </Route>\n      </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}